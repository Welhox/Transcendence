// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
  //  output        = "./generated/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//the user data, including hashed password, and another table with OTP data
//the user data, including hashed password, and another table with OTP data
model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  password    String
  email       String   @unique
  OTP         Otp[]
  isActivated Boolean  @default(false)
  language    String   @default("en")
  wins        Int      @default(0)
  losses      Int      @default(0)
  played      Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  matchesAsPlayer   Match[] @relation("PlayerMatches")
  matchesAsOpponent Match[] @relation("OpponentMatches")

  sentFriendRequests     FriendRequest[] @relation("Sender")
  receivedFriendRequests FriendRequest[] @relation("Receiver")

  friends	User[]	@relation("UserFriends") // Cascadng deletion not supported: needs manual deletion!!!
  friendOf	User[]	@relation("UserFriends") // Cascadng deletion not supported: needs manual deletion!!!
}

model Otp {
  id        Int      @id @default(autoincrement())
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// added onDelete: Cascade, so the OTP gets delted automatically with the user

model Match {
  id         Int      @id @default(autoincrement())
  playerId   Int
  opponentId Int
  result     String // "win" or "loss"
  date       DateTime @default(now())

  player   User @relation("PlayerMatches", fields: [playerId], references: [id], onDelete: Cascade)
  opponent User @relation("OpponentMatches", fields: [opponentId], references: [id], onDelete: Cascade)
}
// what happens to a match data if one of the players who participated in the game gets deleted?

model FriendRequest {
  id			Int      @id @default(autoincrement())
  sender		User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId		Int
  receiver		User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId	Int
  status		String   @default("pending") // could be "pending", "accepted", "rejected"
  createdAt		DateTime @default(now())
}

//model Post {
//  id        Int      @id @default(autoincrement())
//  title     String   @db.VarChar(255)
//  createdAt DateTime @default(now()) @db.Timestamp(6)
//  content   String?
//  published Boolean  @default(false)
//  authorId  Int
//  author    User     @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//}

//model Profile {
//  id     Int     @id @default(autoincrement())
//  bio    String?
//  userId Int     @unique
//  user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//}

//model User {
//  id      Int      @id @default(autoincrement())
//  name    String?  @db.VarChar(255)
//  email   String   @unique @db.VarChar(255)
//  posts   Post[]
//  profile Profile?
//}
